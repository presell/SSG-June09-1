// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4qFWXcErHc56Nwvh5xTLQR
// Component: Vvm5J3NXNMdl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import TextInput from "../../TextInput"; // plasmic-import: 3r4TxCxZZuIK5/component
import Button from "../../Button"; // plasmic-import: VGxgH9M5y5qbv/component
import Editable from "../../Editable"; // plasmic-import: _4GX0kVcpccZ/component
import TextInput2 from "../../TextInput"; // plasmic-import: IPdAtRJrtj45/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_4QySl5Jbwgie } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 4qySl5jbwgie/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4qFWXcErHc56Nwvh5xTLQR/projectcss
import sty from "./PlasmicSqueezeVariant2.module.css"; // plasmic-import: Vvm5J3NXNMdl/css

import SearchsvgIcon from "../legacy_feed_page_designs/icons/PlasmicIcon__Searchsvg"; // plasmic-import: CRyUolhDoWvR1TU/icon
import ChecksvgIcon from "../legacy_feed_page_designs/icons/PlasmicIcon__Checksvg"; // plasmic-import: JKXZQCGXOZJezuA/icon

createPlasmicElementProxy;

export type PlasmicSqueezeVariant2__VariantMembers = {};
export type PlasmicSqueezeVariant2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSqueezeVariant2__VariantsArgs;
export const PlasmicSqueezeVariant2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSqueezeVariant2__ArgsType = {
  pageId?: number;
  editable?: string;
};
type ArgPropType = keyof PlasmicSqueezeVariant2__ArgsType;
export const PlasmicSqueezeVariant2__ArgProps = new Array<ArgPropType>(
  "pageId",
  "editable"
);

export type PlasmicSqueezeVariant2__OverridesType = {
  root?: Flex__<"div">;
  desktopNotEditable?: Flex__<"div">;
  logo5?: Flex__<typeof PlasmicImg__>;
  text18?: Flex__<"div">;
  text22?: Flex__<"div">;
  text32?: Flex__<"div">;
  text42?: Flex__<typeof TextInput>;
  text52?: Flex__<typeof TextInput>;
  text62?: Flex__<typeof Button>;
  disclaimer2?: Flex__<"div">;
  image12?: Flex__<typeof PlasmicImg__>;
  text72?: Flex__<"div">;
  text82?: Flex__<"div">;
  iconValue7?: Flex__<"div">;
  image22?: Flex__<typeof PlasmicImg__>;
  text92?: Flex__<"div">;
  iconValue8?: Flex__<"div">;
  image32?: Flex__<typeof PlasmicImg__>;
  text102?: Flex__<"div">;
  iconValue9?: Flex__<"div">;
  image42?: Flex__<typeof PlasmicImg__>;
  text112?: Flex__<"div">;
  squeezeC2CtaH13?: Flex__<"div">;
  squeezeC2CtaH23?: Flex__<"div">;
  watchers3?: Flex__<"div">;
  text122?: Flex__<"div">;
  editText124?: Flex__<typeof TextInput2>;
  text132?: Flex__<"div">;
  editText133?: Flex__<typeof TextInput2>;
  image52?: Flex__<typeof PlasmicImg__>;
  editImage56?: Flex__<typeof TextInput2>;
  text142?: Flex__<"div">;
  editText143?: Flex__<typeof TextInput2>;
  text152?: Flex__<"div">;
  editText153?: Flex__<typeof TextInput2>;
  text162?: Flex__<"div">;
  editText163?: Flex__<typeof TextInput2>;
  text172?: Flex__<"div">;
  editText173?: Flex__<typeof TextInput2>;
  mobileNotEditable?: Flex__<"div">;
  logo3?: Flex__<typeof PlasmicImg__>;
  squeezeC2Thumbnail2?: Flex__<typeof PlasmicImg__>;
  squeezeC2H13?: Flex__<"div">;
  squeezeC2H14?: Flex__<"div">;
  iconValue4?: Flex__<"div">;
  squeezeC2Icon12?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value12?: Flex__<"div">;
  iconValue5?: Flex__<"div">;
  squeezeC2Icon22?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value22?: Flex__<"div">;
  iconValue6?: Flex__<"div">;
  squeezeC2Icon32?: Flex__<typeof PlasmicImg__>;
  squeezeC2Icon1Value32?: Flex__<"div">;
  squeezeC2CtaH12?: Flex__<"div">;
  squeezeC2CtaH22?: Flex__<"div">;
  watchers2?: Flex__<"div">;
  squeezeC2Proof2?: Flex__<"div">;
  squeezeC2OfferH12?: Flex__<"div">;
  squeezeC2OfferThumbnail2?: Flex__<typeof PlasmicImg__>;
  squeezeC2ValueH12?: Flex__<"div">;
  squeezeC2ValueH22?: Flex__<"div">;
  squeezeC2ValueH32?: Flex__<"div">;
  logo2?: Flex__<typeof PlasmicImg__>;
  squeezeNav2?: Flex__<"div">;
  squeezeC1H12?: Flex__<"div">;
  squeezeC1H22?: Flex__<"div">;
  form2?: Flex__<typeof FormWrapper>;
  formField?: Flex__<typeof FormItemWrapper>;
  input3?: Flex__<typeof AntdInput>;
  squeezeC1Field12?: Flex__<"div">;
  input4?: Flex__<typeof AntdInput>;
  squeezeC1Field22?: Flex__<"div">;
  squeezeC1Cta2?: Flex__<"div">;
  textInput3?: Flex__<typeof TextInput>;
  textInput4?: Flex__<typeof TextInput>;
  squeezeC1Disclaimer2?: Flex__<"div">;
};

export interface DefaultSqueezeVariant2Props {
  pageId?: number;
  editable?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSqueezeVariant2__RenderFunc(props: {
  variants: PlasmicSqueezeVariant2__VariantsArgs;
  args: PlasmicSqueezeVariant2__ArgsType;
  overrides: PlasmicSqueezeVariant2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          editable: "true"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? `` : undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? `` : undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "editText1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText5",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText6",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText7",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText8",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText9",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText10",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText11",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText122",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText13",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText14",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText15",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText16",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText17",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage5",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text42.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text52.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText124.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText133.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage56.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText143.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText153.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText163.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText173.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    cms: usePlasmicDataOp(() => {
      return {
        sourceId: "jhyRJR71TBt7ca5EZWznEH",
        opId: "5faeb024-731c-4be2-a38f-b6ed2dc2879b",
        userArgs: {
          filters: [$props.pageId]
        },
        cacheKey: `plasmic.$.5faeb024-731c-4be2-a38f-b6ed2dc2879b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4QySl5Jbwgie()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"desktopNotEditable"}
        data-plasmic-override={overrides.desktopNotEditable}
        className={classNames(projectcss.all, sty.desktopNotEditable)}
      >
        <div className={classNames(projectcss.all, sty.columns__aFndB)}>
          <div className={classNames(projectcss.all, sty.column__nr5Zq)}>
            <PlasmicImg__
              data-plasmic-name={"logo5"}
              data-plasmic-override={overrides.logo5}
              alt={""}
              className={classNames(sty.logo5)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"175px"}
              loading={"eager"}
              src={(() => {
                try {
                  return $state.editImage5 || $queries?.cms?.data[0]?.logo;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div
              data-plasmic-name={"text18"}
              data-plasmic-override={overrides.text18}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text18
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.editText1 || $queries?.cms?.data[0]?.text_1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Unlock Discount > Easy Checkout ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__zvNnc)}
              code={
                '<svg width="470px" height="23px" version="1.1" style="border-radius: 20px">\n    <defs>\n        <linearGradient id="graywave1" x1="0%" y1="0%" x2="100%" y2="100%">\n          <stop style="stop-color:#eee;stop-opacity:0.5" offset="0"/>\n          <stop style="stop-color:#ccc;stop-opacity:0.5" offset="0.5"/>\n          <stop style="stop-color:#eee;stop-opacity:0.5" offset="1.0"/>\n        </linearGradient>\n        <linearGradient id="graywave2" x1="0%" y1="0%" x2="100%" y2="100%">\n          <stop style="stop-color:#ccc;stop-opacity:0.5" offset="0"/>\n          <stop style="stop-color:#eee;stop-opacity:0.5" offset="0.5"/>\n          <stop style="stop-color:#ccc;stop-opacity:0.5" offset="1.0"/>\n        </linearGradient>\n    </defs>\n    <rect style="fill:url(#graywave1);fill-opacity:1;fill-rule:evenodd;" id="loaderrect1" width="100%" height="100%" x="-200%" y="0"/>\n    <rect style="fill:url(#graywave2);fill-opacity:1;fill-rule:evenodd;" id="loaderrect2" width="100%" height="100%" x="-100%" y="0"/>\n    <rect style="fill:url(#graywave1);fill-opacity:1;fill-rule:evenodd;" id="loaderrect3" width="100%" height="100%" x="0" y="0"/>\n    <animate xlink:href="#loaderrect1" attributename="x" from="-200%" to="0%" dur="0.8s" begin="0s" fill="freeze" repeatcount="indefinite"/>\n    <animate xlink:href="#loaderrect2" attributename="x" from="-100%" to="100%" dur="0.8s" begin="0s" fill="freeze"repeatcount="indefinite"/>\n    <animate xlink:href="#loaderrect3" attributename="x" from="0%" to="200%" dur="0.8s" begin="0s" fill="freeze"repeatcount="indefinite"/>\n</svg>'
              }
            />

            <div
              data-plasmic-name={"text22"}
              data-plasmic-override={overrides.text22}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text22
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.editText2 || $queries?.cms?.data[0]?.text_2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Get Pricing Details";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"text32"}
              data-plasmic-override={overrides.text32}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text32
              )}
            >
              <React.Fragment>
                {$state.editText3 || $queries?.cms?.data[0]?.text_3}
              </React.Fragment>
            </div>
            <form
              action={
                "https://hook.us1.make.com/5mordka6hk6nytd9doqnbe6kbf4r3drk"
              }
              className={classNames(projectcss.all, sty.form__xt2A4)}
              method={"post"}
            >
              <TextInput
                data-plasmic-name={"text42"}
                data-plasmic-override={overrides.text42}
                aria-label={"email"}
                className={classNames("__wab_instance", sty.text42)}
                name={"field1"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["text42", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"\ud83d\udce7 Your Email Address"}
                required={true}
                value={
                  generateStateValueProp($state, ["text42", "value"]) ?? ""
                }
              />

              <TextInput
                data-plasmic-name={"text52"}
                data-plasmic-override={overrides.text52}
                aria-label={"email"}
                className={classNames("__wab_instance", sty.text52)}
                name={"field2"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["text52", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={" \u260e\ufe0f Your Phone Number"}
                required={true}
                value={
                  generateStateValueProp($state, ["text52", "value"]) ?? ""
                }
              />

              <Button
                data-plasmic-name={"text62"}
                data-plasmic-override={overrides.text62}
                className={classNames("__wab_instance", sty.text62)}
                color={undefined}
                submitsForm={false}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sn6P
                  )}
                >
                  <React.Fragment>
                    {$state.editText6 || $queries?.cms?.data[0]?.text_6}
                  </React.Fragment>
                </div>
              </Button>
            </form>
            <div className={classNames(projectcss.all, sty.freeBox___0Cpc1)} />

            <div className={classNames(projectcss.all, sty.freeBox__rylZ)}>
              <div
                data-plasmic-name={"disclaimer2"}
                data-plasmic-override={overrides.disclaimer2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.disclaimer2
                )}
              >
                {
                  "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service."
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__dw56)}>
            <div className={classNames(projectcss.all, sty.freeBox__dYue)}>
              <PlasmicImg__
                data-plasmic-name={"image12"}
                data-plasmic-override={overrides.image12}
                alt={""}
                className={classNames(sty.image12)}
                displayHeight={"auto"}
                displayMaxHeight={"190px"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"121px"}
                loading={"eager"}
                src={(() => {
                  try {
                    return $state.editImage1 || $queries?.cms?.data[0]?.image_1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div className={classNames(projectcss.all, sty.freeBox___7Dd1J)}>
                <div
                  data-plasmic-name={"text72"}
                  data-plasmic-override={overrides.text72}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text72
                  )}
                >
                  <React.Fragment>
                    {$state.editText7 || $queries?.cms?.data[0]?.text_7}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"text82"}
                  data-plasmic-override={overrides.text82}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text82
                  )}
                >
                  <React.Fragment>
                    {$state.editText8 || $queries?.cms?.data[0]?.text_8}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1YmeB)} />

            <div
              data-plasmic-name={"iconValue7"}
              data-plasmic-override={overrides.iconValue7}
              className={classNames(projectcss.all, sty.iconValue7)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__kOknJ)}>
                <PlasmicImg__
                  data-plasmic-name={"image22"}
                  data-plasmic-override={overrides.image22}
                  alt={""}
                  className={classNames(sty.image22)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return (
                        $state.editImage2 || $queries?.cms?.data[0]?.image_2
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"text92"}
                  data-plasmic-override={overrides.text92}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text92
                  )}
                >
                  <React.Fragment>
                    {$state.editText9 || $queries?.cms?.data[0]?.text_9}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"iconValue8"}
              data-plasmic-override={overrides.iconValue8}
              className={classNames(projectcss.all, sty.iconValue8)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ghKj1)}>
                <PlasmicImg__
                  data-plasmic-name={"image32"}
                  data-plasmic-override={overrides.image32}
                  alt={""}
                  className={classNames(sty.image32)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return (
                        $state.editImage3 || $queries?.cms?.data[0]?.image_3
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"text102"}
                  data-plasmic-override={overrides.text102}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text102
                  )}
                >
                  <React.Fragment>
                    {$state.editText10 || $queries?.cms?.data[0]?.text_10}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"iconValue9"}
              data-plasmic-override={overrides.iconValue9}
              className={classNames(projectcss.all, sty.iconValue9)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mUcm9)}>
                <PlasmicImg__
                  data-plasmic-name={"image42"}
                  data-plasmic-override={overrides.image42}
                  alt={""}
                  className={classNames(sty.image42)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return (
                        $state.editImage4 || $queries?.cms?.data[0]?.image_4
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"text112"}
                  data-plasmic-override={overrides.text112}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text112
                  )}
                >
                  <React.Fragment>
                    {$state.editText11 || $queries?.cms?.data[0]?.text_11}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__v8Rn)} />

            <div className={classNames(projectcss.all, sty.freeBox__bypLm)}>
              <div
                data-plasmic-name={"squeezeC2CtaH13"}
                data-plasmic-override={overrides.squeezeC2CtaH13}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2CtaH13
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_cta_h1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "CTA Headline 1";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"squeezeC2CtaH23"}
                data-plasmic-override={overrides.squeezeC2CtaH23}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2CtaH23
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_cta_h2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "CTA Headline 2";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___8ZaV9)} />

            <div
              data-plasmic-name={"watchers3"}
              data-plasmic-override={overrides.watchers3}
              className={classNames(projectcss.all, sty.watchers3)}
            >
              <Editable
                className={classNames("__wab_instance", sty.editable__j8EBa)}
                edit2={
                  <TextInput2
                    data-plasmic-name={"editText124"}
                    data-plasmic-override={overrides.editText124}
                    className={classNames("__wab_instance", sty.editText124)}
                    endIcon={null}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "editText124",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={(() => {
                      try {
                        return (
                          $state.editText122 || $queries?.cms?.data[0]?.text_12
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, [
                        "editText124",
                        "value"
                      ]) ?? ""
                    }
                  />
                }
              >
                <div
                  data-plasmic-name={"text122"}
                  data-plasmic-override={overrides.text122}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text122
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $state.editText122 || $queries?.cms?.data[0]?.text_12
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Editable>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cGCm6)}>
              <div className={classNames(projectcss.all, sty.freeBox__qt5SD)}>
                <Editable
                  className={classNames("__wab_instance", sty.editable__mUKkr)}
                  edit2={
                    <TextInput2
                      data-plasmic-name={"editText133"}
                      data-plasmic-override={overrides.editText133}
                      className={classNames("__wab_instance", sty.editText133)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText133",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText13 || $queries?.cms?.data[0]?.text_13
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText133",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text132"}
                    data-plasmic-override={overrides.text132}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text132
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText13 || $queries?.cms?.data[0]?.text_13
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Enter some text:";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__qboCl)}
                  edit2={
                    <TextInput2
                      data-plasmic-name={"editImage56"}
                      data-plasmic-override={overrides.editImage56}
                      className={classNames("__wab_instance", sty.editImage56)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editImage56",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editImage5 || $queries?.cms?.data[0]?.image_5
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage56",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <PlasmicImg__
                    data-plasmic-name={"image52"}
                    data-plasmic-override={overrides.image52}
                    alt={""}
                    className={classNames(sty.image52)}
                    displayHeight={"auto"}
                    displayMaxHeight={"50px"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return (
                          $state.editImage5 || $queries?.cms?.data[0]?.image_5
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__jX2T0)}
                  edit2={
                    <TextInput2
                      data-plasmic-name={"editText143"}
                      data-plasmic-override={overrides.editText143}
                      className={classNames("__wab_instance", sty.editText143)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText143",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText14 || $queries?.cms?.data[0]?.text_14
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText143",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text142"}
                    data-plasmic-override={overrides.text142}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text142
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText14 || $queries?.cms?.data[0]?.text_14
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___3NEcO)}>
                <Editable
                  className={classNames("__wab_instance", sty.editable___2Gh5Z)}
                  edit2={
                    <TextInput2
                      data-plasmic-name={"editText153"}
                      data-plasmic-override={overrides.editText153}
                      className={classNames("__wab_instance", sty.editText153)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText153",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={`Enter something…${
                        $state.editText15 || $queries?.cms?.data[0]?.text_15
                      }`}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText153",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text152"}
                    data-plasmic-override={overrides.text152}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text152
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText15 || $queries?.cms?.data[0]?.text_15
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__ov3K)}
                  edit2={
                    <TextInput2
                      data-plasmic-name={"editText163"}
                      data-plasmic-override={overrides.editText163}
                      className={classNames("__wab_instance", sty.editText163)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText163",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText16 || $queries?.cms?.data[0]?.text_16
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText163",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text162"}
                    data-plasmic-override={overrides.text162}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text162
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText16 || $queries?.cms?.data[0]?.text_16
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__h8Jdt)}
                  edit2={
                    <TextInput2
                      data-plasmic-name={"editText173"}
                      data-plasmic-override={overrides.editText173}
                      className={classNames("__wab_instance", sty.editText173)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText173",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText17 || $queries?.cms?.data[0]?.text_17
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText173",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text172"}
                    data-plasmic-override={overrides.text172}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text172
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText17 || $queries?.cms?.data[0]?.text_17
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"mobileNotEditable"}
        data-plasmic-override={overrides.mobileNotEditable}
        className={classNames(projectcss.all, sty.mobileNotEditable)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__oqsz4)}>
          <PlasmicImg__
            data-plasmic-name={"logo3"}
            data-plasmic-override={overrides.logo3}
            alt={""}
            className={classNames(sty.logo3)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"175px"}
            loading={"eager"}
            src={(() => {
              try {
                return $queries.cms.data[0].logo;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
        <div className={classNames(projectcss.all, sty.columns__mzVOx)}>
          <div className={classNames(projectcss.all, sty.column__scUhS)}>
            <div className={classNames(projectcss.all, sty.freeBox__zk0Dd)}>
              <PlasmicImg__
                data-plasmic-name={"squeezeC2Thumbnail2"}
                data-plasmic-override={overrides.squeezeC2Thumbnail2}
                alt={""}
                className={classNames(sty.squeezeC2Thumbnail2)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"125px"}
                loading={"eager"}
                src={(() => {
                  try {
                    return $state.editImage1 || $queries?.cms?.data[0]?.image_1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div className={classNames(projectcss.all, sty.freeBox__dEqQr)}>
                <div
                  data-plasmic-name={"squeezeC2H13"}
                  data-plasmic-override={overrides.squeezeC2H13}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2H13
                  )}
                >
                  <React.Fragment>
                    {$state.editText7 || $queries?.cms?.data[0]?.text_7}
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={"squeezeC2H14"}
                  data-plasmic-override={overrides.squeezeC2H14}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2H14
                  )}
                >
                  <React.Fragment>
                    {$state.editText8 || $queries?.cms?.data[0]?.text_8}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tyQwh)} />

            <div
              data-plasmic-name={"iconValue4"}
              data-plasmic-override={overrides.iconValue4}
              className={classNames(projectcss.all, sty.iconValue4)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___4NeTa)}>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2Icon12"}
                  data-plasmic-override={overrides.squeezeC2Icon12}
                  alt={""}
                  className={classNames(sty.squeezeC2Icon12)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return (
                        $state.editImage2 || $queries?.cms?.data[0]?.image_2
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"squeezeC2Icon1Value12"}
                  data-plasmic-override={overrides.squeezeC2Icon1Value12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2Icon1Value12
                  )}
                >
                  <React.Fragment>
                    {$state.editText9 || $queries?.cms?.data[0]?.text_9}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"iconValue5"}
              data-plasmic-override={overrides.iconValue5}
              className={classNames(projectcss.all, sty.iconValue5)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zrBj)}>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2Icon22"}
                  data-plasmic-override={overrides.squeezeC2Icon22}
                  alt={""}
                  className={classNames(sty.squeezeC2Icon22)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return (
                        $state.editImage3 || $queries?.cms?.data[0]?.image_3
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"squeezeC2Icon1Value22"}
                  data-plasmic-override={overrides.squeezeC2Icon1Value22}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2Icon1Value22
                  )}
                >
                  <React.Fragment>
                    {$state.editText10 || $queries?.cms?.data[0]?.text_10}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"iconValue6"}
              data-plasmic-override={overrides.iconValue6}
              className={classNames(projectcss.all, sty.iconValue6)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__sSz5S)}>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2Icon32"}
                  data-plasmic-override={overrides.squeezeC2Icon32}
                  alt={""}
                  className={classNames(sty.squeezeC2Icon32)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"40px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return (
                        $state.editImage4 || $queries?.cms?.data[0]?.image_4
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />

                <div
                  data-plasmic-name={"squeezeC2Icon1Value32"}
                  data-plasmic-override={overrides.squeezeC2Icon1Value32}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2Icon1Value32
                  )}
                >
                  <React.Fragment>
                    {$state.editText11 || $queries?.cms?.data[0]?.text_11}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__mr5Y4)} />

            <div className={classNames(projectcss.all, sty.freeBox__shdX)}>
              <div
                data-plasmic-name={"squeezeC2CtaH12"}
                data-plasmic-override={overrides.squeezeC2CtaH12}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2CtaH12
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_cta_h1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "CTA Headline 1";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"squeezeC2CtaH22"}
                data-plasmic-override={overrides.squeezeC2CtaH22}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2CtaH22
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_cta_h2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "CTA Headline 2";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__niUuz)} />

            <div
              data-plasmic-name={"watchers2"}
              data-plasmic-override={overrides.watchers2}
              className={classNames(projectcss.all, sty.watchers2)}
            >
              <div
                data-plasmic-name={"squeezeC2Proof2"}
                data-plasmic-override={overrides.squeezeC2Proof2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2Proof2
                )}
              >
                {"Enter some text"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__m24F)}>
              <div className={classNames(projectcss.all, sty.freeBox__beeGx)}>
                <div
                  data-plasmic-name={"squeezeC2OfferH12"}
                  data-plasmic-override={overrides.squeezeC2OfferH12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2OfferH12
                  )}
                >
                  {"Enter some text:"}
                </div>
                <PlasmicImg__
                  data-plasmic-name={"squeezeC2OfferThumbnail2"}
                  data-plasmic-override={overrides.squeezeC2OfferThumbnail2}
                  alt={""}
                  className={classNames(sty.squeezeC2OfferThumbnail2)}
                  displayHeight={"auto"}
                  displayMaxHeight={"50px"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"eager"}
                  src={undefined}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8QGuY
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kJdvD)}>
                <div
                  data-plasmic-name={"squeezeC2ValueH12"}
                  data-plasmic-override={overrides.squeezeC2ValueH12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2ValueH12
                  )}
                >
                  {"Enter some text"}
                </div>
                <div
                  data-plasmic-name={"squeezeC2ValueH22"}
                  data-plasmic-override={overrides.squeezeC2ValueH22}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2ValueH22
                  )}
                >
                  {"Enter some text"}
                </div>
                <div
                  data-plasmic-name={"squeezeC2ValueH32"}
                  data-plasmic-override={overrides.squeezeC2ValueH32}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.squeezeC2ValueH32
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__aHixg)}>
            <PlasmicImg__
              data-plasmic-name={"logo2"}
              data-plasmic-override={overrides.logo2}
              alt={""}
              className={classNames(sty.logo2)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/legacy_feed_page_designs/images/_046F157ALogo250X104X01P04X01L000002028Png.png",
                fullWidth: 177,
                fullHeight: 57,
                aspectRatio: undefined
              }}
            />

            <div
              data-plasmic-name={"squeezeNav2"}
              data-plasmic-override={overrides.squeezeNav2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.squeezeNav2
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $ctx.fetchDyanamicData.records[0].fields
                      .squeeze_c1_nav;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"squeezeC1H12"}
              data-plasmic-override={overrides.squeezeC1H12}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.squeezeC1H12
              )}
            >
              <React.Fragment>
                {$state.editText2 || $queries?.cms?.data[0]?.text_2}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"squeezeC1H22"}
              data-plasmic-override={overrides.squeezeC1H22}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.squeezeC1H22
              )}
            >
              <React.Fragment>
                {$state.editText1 || $queries?.cms?.data[0]?.text_1}
              </React.Fragment>
            </div>
            <form
              action={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "https://hook.us1.make.com/5mordka6hk6nytd9doqnbe6kbf4r3drk"
                  : undefined
              }
              className={classNames(projectcss.all, sty.form__zI0Bk)}
              method={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "post"
                  : undefined
              }
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form2),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form2", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form2", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["form2"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form2.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form2.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form2"}
                    data-plasmic-override={overrides.form2}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"formField"}
                      data-plasmic-override={overrides.formField}
                      className={classNames("__wab_instance", sty.formField)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pWnF3
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                      name={"name"}
                    >
                      {(() => {
                        const child$Props = {
                          addonAfter: null,
                          addonBefore: null,
                          className: classNames("__wab_instance", sty.input3),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ),
                          prefix: (
                            <div
                              data-plasmic-name={"squeezeC1Field12"}
                              data-plasmic-override={overrides.squeezeC1Field12}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.squeezeC1Field12
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c1_field1;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "👋  Your First Name";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ),
                          suffix: null,
                          value: generateStateValueProp($state, [
                            "input3",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input3.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input3"}
                            data-plasmic-override={overrides.input3}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          addonAfter: null,
                          addonBefore: null,
                          className: classNames("__wab_instance", sty.input4),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input4", "value"],
                            AntdInput_Helpers
                          ),
                          prefix: (
                            <div
                              data-plasmic-name={"squeezeC1Field22"}
                              data-plasmic-override={overrides.squeezeC1Field22}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.squeezeC1Field22
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.fetchDyanamicData.records[0]
                                      .fields.squeeze_c1_field2;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "📩  Your Email Address";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ),
                          suffix: null,
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__emeSu
                      )}
                      icon={null}
                    >
                      <div
                        data-plasmic-name={"squeezeC1Cta2"}
                        data-plasmic-override={overrides.squeezeC1Cta2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.squeezeC1Cta2
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
              <TextInput
                data-plasmic-name={"textInput3"}
                data-plasmic-override={overrides.textInput3}
                aria-label={"email"}
                className={classNames("__wab_instance", sty.textInput3)}
                name={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "field1"
                    : "email"
                }
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput3", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"📧 Your Email Address"}
                value={
                  generateStateValueProp($state, ["textInput3", "value"]) ?? ""
                }
              />

              <TextInput
                data-plasmic-name={"textInput4"}
                data-plasmic-override={overrides.textInput4}
                aria-label={"email"}
                className={classNames("__wab_instance", sty.textInput4)}
                name={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "field2"
                    : "email"
                }
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput4", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? " \u260e\ufe0f Your Phone Number"
                    : "📧 Your Email Address"
                }
                value={
                  generateStateValueProp($state, ["textInput4", "value"]) ?? ""
                }
              />

              <Button
                className={classNames("__wab_instance", sty.button__xnFtW)}
                color={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? undefined
                    : undefined
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zClcg
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields
                          .squeeze_c1_cta;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Get Offer";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Button>
            </form>
            <div className={classNames(projectcss.all, sty.freeBox__oUt9F)} />

            <div className={classNames(projectcss.all, sty.freeBox___6Zrhy)}>
              <div
                data-plasmic-name={"squeezeC1Disclaimer2"}
                data-plasmic-override={overrides.squeezeC1Disclaimer2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC1Disclaimer2
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.fetchDyanamicData.records[0].fields
                          .squeeze_c1_disclaimer;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service."
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      <Embed className={classNames("__wab_instance", sty.embedHtml__lb8LM)} />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "desktopNotEditable",
    "logo5",
    "text18",
    "text22",
    "text32",
    "text42",
    "text52",
    "text62",
    "disclaimer2",
    "image12",
    "text72",
    "text82",
    "iconValue7",
    "image22",
    "text92",
    "iconValue8",
    "image32",
    "text102",
    "iconValue9",
    "image42",
    "text112",
    "squeezeC2CtaH13",
    "squeezeC2CtaH23",
    "watchers3",
    "text122",
    "editText124",
    "text132",
    "editText133",
    "image52",
    "editImage56",
    "text142",
    "editText143",
    "text152",
    "editText153",
    "text162",
    "editText163",
    "text172",
    "editText173",
    "mobileNotEditable",
    "logo3",
    "squeezeC2Thumbnail2",
    "squeezeC2H13",
    "squeezeC2H14",
    "iconValue4",
    "squeezeC2Icon12",
    "squeezeC2Icon1Value12",
    "iconValue5",
    "squeezeC2Icon22",
    "squeezeC2Icon1Value22",
    "iconValue6",
    "squeezeC2Icon32",
    "squeezeC2Icon1Value32",
    "squeezeC2CtaH12",
    "squeezeC2CtaH22",
    "watchers2",
    "squeezeC2Proof2",
    "squeezeC2OfferH12",
    "squeezeC2OfferThumbnail2",
    "squeezeC2ValueH12",
    "squeezeC2ValueH22",
    "squeezeC2ValueH32",
    "logo2",
    "squeezeNav2",
    "squeezeC1H12",
    "squeezeC1H22",
    "form2",
    "formField",
    "input3",
    "squeezeC1Field12",
    "input4",
    "squeezeC1Field22",
    "squeezeC1Cta2",
    "textInput3",
    "textInput4",
    "squeezeC1Disclaimer2"
  ],
  desktopNotEditable: [
    "desktopNotEditable",
    "logo5",
    "text18",
    "text22",
    "text32",
    "text42",
    "text52",
    "text62",
    "disclaimer2",
    "image12",
    "text72",
    "text82",
    "iconValue7",
    "image22",
    "text92",
    "iconValue8",
    "image32",
    "text102",
    "iconValue9",
    "image42",
    "text112",
    "squeezeC2CtaH13",
    "squeezeC2CtaH23",
    "watchers3",
    "text122",
    "editText124",
    "text132",
    "editText133",
    "image52",
    "editImage56",
    "text142",
    "editText143",
    "text152",
    "editText153",
    "text162",
    "editText163",
    "text172",
    "editText173"
  ],
  logo5: ["logo5"],
  text18: ["text18"],
  text22: ["text22"],
  text32: ["text32"],
  text42: ["text42"],
  text52: ["text52"],
  text62: ["text62"],
  disclaimer2: ["disclaimer2"],
  image12: ["image12"],
  text72: ["text72"],
  text82: ["text82"],
  iconValue7: ["iconValue7", "image22", "text92"],
  image22: ["image22"],
  text92: ["text92"],
  iconValue8: ["iconValue8", "image32", "text102"],
  image32: ["image32"],
  text102: ["text102"],
  iconValue9: ["iconValue9", "image42", "text112"],
  image42: ["image42"],
  text112: ["text112"],
  squeezeC2CtaH13: ["squeezeC2CtaH13"],
  squeezeC2CtaH23: ["squeezeC2CtaH23"],
  watchers3: ["watchers3", "text122", "editText124"],
  text122: ["text122"],
  editText124: ["editText124"],
  text132: ["text132"],
  editText133: ["editText133"],
  image52: ["image52"],
  editImage56: ["editImage56"],
  text142: ["text142"],
  editText143: ["editText143"],
  text152: ["text152"],
  editText153: ["editText153"],
  text162: ["text162"],
  editText163: ["editText163"],
  text172: ["text172"],
  editText173: ["editText173"],
  mobileNotEditable: [
    "mobileNotEditable",
    "logo3",
    "squeezeC2Thumbnail2",
    "squeezeC2H13",
    "squeezeC2H14",
    "iconValue4",
    "squeezeC2Icon12",
    "squeezeC2Icon1Value12",
    "iconValue5",
    "squeezeC2Icon22",
    "squeezeC2Icon1Value22",
    "iconValue6",
    "squeezeC2Icon32",
    "squeezeC2Icon1Value32",
    "squeezeC2CtaH12",
    "squeezeC2CtaH22",
    "watchers2",
    "squeezeC2Proof2",
    "squeezeC2OfferH12",
    "squeezeC2OfferThumbnail2",
    "squeezeC2ValueH12",
    "squeezeC2ValueH22",
    "squeezeC2ValueH32",
    "logo2",
    "squeezeNav2",
    "squeezeC1H12",
    "squeezeC1H22",
    "form2",
    "formField",
    "input3",
    "squeezeC1Field12",
    "input4",
    "squeezeC1Field22",
    "squeezeC1Cta2",
    "textInput3",
    "textInput4",
    "squeezeC1Disclaimer2"
  ],
  logo3: ["logo3"],
  squeezeC2Thumbnail2: ["squeezeC2Thumbnail2"],
  squeezeC2H13: ["squeezeC2H13"],
  squeezeC2H14: ["squeezeC2H14"],
  iconValue4: ["iconValue4", "squeezeC2Icon12", "squeezeC2Icon1Value12"],
  squeezeC2Icon12: ["squeezeC2Icon12"],
  squeezeC2Icon1Value12: ["squeezeC2Icon1Value12"],
  iconValue5: ["iconValue5", "squeezeC2Icon22", "squeezeC2Icon1Value22"],
  squeezeC2Icon22: ["squeezeC2Icon22"],
  squeezeC2Icon1Value22: ["squeezeC2Icon1Value22"],
  iconValue6: ["iconValue6", "squeezeC2Icon32", "squeezeC2Icon1Value32"],
  squeezeC2Icon32: ["squeezeC2Icon32"],
  squeezeC2Icon1Value32: ["squeezeC2Icon1Value32"],
  squeezeC2CtaH12: ["squeezeC2CtaH12"],
  squeezeC2CtaH22: ["squeezeC2CtaH22"],
  watchers2: ["watchers2", "squeezeC2Proof2"],
  squeezeC2Proof2: ["squeezeC2Proof2"],
  squeezeC2OfferH12: ["squeezeC2OfferH12"],
  squeezeC2OfferThumbnail2: ["squeezeC2OfferThumbnail2"],
  squeezeC2ValueH12: ["squeezeC2ValueH12"],
  squeezeC2ValueH22: ["squeezeC2ValueH22"],
  squeezeC2ValueH32: ["squeezeC2ValueH32"],
  logo2: ["logo2"],
  squeezeNav2: ["squeezeNav2"],
  squeezeC1H12: ["squeezeC1H12"],
  squeezeC1H22: ["squeezeC1H22"],
  form2: [
    "form2",
    "formField",
    "input3",
    "squeezeC1Field12",
    "input4",
    "squeezeC1Field22",
    "squeezeC1Cta2"
  ],
  formField: [
    "formField",
    "input3",
    "squeezeC1Field12",
    "input4",
    "squeezeC1Field22"
  ],
  input3: ["input3", "squeezeC1Field12"],
  squeezeC1Field12: ["squeezeC1Field12"],
  input4: ["input4", "squeezeC1Field22"],
  squeezeC1Field22: ["squeezeC1Field22"],
  squeezeC1Cta2: ["squeezeC1Cta2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  squeezeC1Disclaimer2: ["squeezeC1Disclaimer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  desktopNotEditable: "div";
  logo5: typeof PlasmicImg__;
  text18: "div";
  text22: "div";
  text32: "div";
  text42: typeof TextInput;
  text52: typeof TextInput;
  text62: typeof Button;
  disclaimer2: "div";
  image12: typeof PlasmicImg__;
  text72: "div";
  text82: "div";
  iconValue7: "div";
  image22: typeof PlasmicImg__;
  text92: "div";
  iconValue8: "div";
  image32: typeof PlasmicImg__;
  text102: "div";
  iconValue9: "div";
  image42: typeof PlasmicImg__;
  text112: "div";
  squeezeC2CtaH13: "div";
  squeezeC2CtaH23: "div";
  watchers3: "div";
  text122: "div";
  editText124: typeof TextInput2;
  text132: "div";
  editText133: typeof TextInput2;
  image52: typeof PlasmicImg__;
  editImage56: typeof TextInput2;
  text142: "div";
  editText143: typeof TextInput2;
  text152: "div";
  editText153: typeof TextInput2;
  text162: "div";
  editText163: typeof TextInput2;
  text172: "div";
  editText173: typeof TextInput2;
  mobileNotEditable: "div";
  logo3: typeof PlasmicImg__;
  squeezeC2Thumbnail2: typeof PlasmicImg__;
  squeezeC2H13: "div";
  squeezeC2H14: "div";
  iconValue4: "div";
  squeezeC2Icon12: typeof PlasmicImg__;
  squeezeC2Icon1Value12: "div";
  iconValue5: "div";
  squeezeC2Icon22: typeof PlasmicImg__;
  squeezeC2Icon1Value22: "div";
  iconValue6: "div";
  squeezeC2Icon32: typeof PlasmicImg__;
  squeezeC2Icon1Value32: "div";
  squeezeC2CtaH12: "div";
  squeezeC2CtaH22: "div";
  watchers2: "div";
  squeezeC2Proof2: "div";
  squeezeC2OfferH12: "div";
  squeezeC2OfferThumbnail2: typeof PlasmicImg__;
  squeezeC2ValueH12: "div";
  squeezeC2ValueH22: "div";
  squeezeC2ValueH32: "div";
  logo2: typeof PlasmicImg__;
  squeezeNav2: "div";
  squeezeC1H12: "div";
  squeezeC1H22: "div";
  form2: typeof FormWrapper;
  formField: typeof FormItemWrapper;
  input3: typeof AntdInput;
  squeezeC1Field12: "div";
  input4: typeof AntdInput;
  squeezeC1Field22: "div";
  squeezeC1Cta2: "div";
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  squeezeC1Disclaimer2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSqueezeVariant2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSqueezeVariant2__VariantsArgs;
    args?: PlasmicSqueezeVariant2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSqueezeVariant2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSqueezeVariant2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSqueezeVariant2__ArgProps,
          internalVariantPropNames: PlasmicSqueezeVariant2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSqueezeVariant2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSqueezeVariant2";
  } else {
    func.displayName = `PlasmicSqueezeVariant2.${nodeName}`;
  }
  return func;
}

export const PlasmicSqueezeVariant2 = Object.assign(
  // Top-level PlasmicSqueezeVariant2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    desktopNotEditable: makeNodeComponent("desktopNotEditable"),
    logo5: makeNodeComponent("logo5"),
    text18: makeNodeComponent("text18"),
    text22: makeNodeComponent("text22"),
    text32: makeNodeComponent("text32"),
    text42: makeNodeComponent("text42"),
    text52: makeNodeComponent("text52"),
    text62: makeNodeComponent("text62"),
    disclaimer2: makeNodeComponent("disclaimer2"),
    image12: makeNodeComponent("image12"),
    text72: makeNodeComponent("text72"),
    text82: makeNodeComponent("text82"),
    iconValue7: makeNodeComponent("iconValue7"),
    image22: makeNodeComponent("image22"),
    text92: makeNodeComponent("text92"),
    iconValue8: makeNodeComponent("iconValue8"),
    image32: makeNodeComponent("image32"),
    text102: makeNodeComponent("text102"),
    iconValue9: makeNodeComponent("iconValue9"),
    image42: makeNodeComponent("image42"),
    text112: makeNodeComponent("text112"),
    squeezeC2CtaH13: makeNodeComponent("squeezeC2CtaH13"),
    squeezeC2CtaH23: makeNodeComponent("squeezeC2CtaH23"),
    watchers3: makeNodeComponent("watchers3"),
    text122: makeNodeComponent("text122"),
    editText124: makeNodeComponent("editText124"),
    text132: makeNodeComponent("text132"),
    editText133: makeNodeComponent("editText133"),
    image52: makeNodeComponent("image52"),
    editImage56: makeNodeComponent("editImage56"),
    text142: makeNodeComponent("text142"),
    editText143: makeNodeComponent("editText143"),
    text152: makeNodeComponent("text152"),
    editText153: makeNodeComponent("editText153"),
    text162: makeNodeComponent("text162"),
    editText163: makeNodeComponent("editText163"),
    text172: makeNodeComponent("text172"),
    editText173: makeNodeComponent("editText173"),
    mobileNotEditable: makeNodeComponent("mobileNotEditable"),
    logo3: makeNodeComponent("logo3"),
    squeezeC2Thumbnail2: makeNodeComponent("squeezeC2Thumbnail2"),
    squeezeC2H13: makeNodeComponent("squeezeC2H13"),
    squeezeC2H14: makeNodeComponent("squeezeC2H14"),
    iconValue4: makeNodeComponent("iconValue4"),
    squeezeC2Icon12: makeNodeComponent("squeezeC2Icon12"),
    squeezeC2Icon1Value12: makeNodeComponent("squeezeC2Icon1Value12"),
    iconValue5: makeNodeComponent("iconValue5"),
    squeezeC2Icon22: makeNodeComponent("squeezeC2Icon22"),
    squeezeC2Icon1Value22: makeNodeComponent("squeezeC2Icon1Value22"),
    iconValue6: makeNodeComponent("iconValue6"),
    squeezeC2Icon32: makeNodeComponent("squeezeC2Icon32"),
    squeezeC2Icon1Value32: makeNodeComponent("squeezeC2Icon1Value32"),
    squeezeC2CtaH12: makeNodeComponent("squeezeC2CtaH12"),
    squeezeC2CtaH22: makeNodeComponent("squeezeC2CtaH22"),
    watchers2: makeNodeComponent("watchers2"),
    squeezeC2Proof2: makeNodeComponent("squeezeC2Proof2"),
    squeezeC2OfferH12: makeNodeComponent("squeezeC2OfferH12"),
    squeezeC2OfferThumbnail2: makeNodeComponent("squeezeC2OfferThumbnail2"),
    squeezeC2ValueH12: makeNodeComponent("squeezeC2ValueH12"),
    squeezeC2ValueH22: makeNodeComponent("squeezeC2ValueH22"),
    squeezeC2ValueH32: makeNodeComponent("squeezeC2ValueH32"),
    logo2: makeNodeComponent("logo2"),
    squeezeNav2: makeNodeComponent("squeezeNav2"),
    squeezeC1H12: makeNodeComponent("squeezeC1H12"),
    squeezeC1H22: makeNodeComponent("squeezeC1H22"),
    form2: makeNodeComponent("form2"),
    formField: makeNodeComponent("formField"),
    input3: makeNodeComponent("input3"),
    squeezeC1Field12: makeNodeComponent("squeezeC1Field12"),
    input4: makeNodeComponent("input4"),
    squeezeC1Field22: makeNodeComponent("squeezeC1Field22"),
    squeezeC1Cta2: makeNodeComponent("squeezeC1Cta2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    squeezeC1Disclaimer2: makeNodeComponent("squeezeC1Disclaimer2"),

    // Metadata about props expected for PlasmicSqueezeVariant2
    internalVariantProps: PlasmicSqueezeVariant2__VariantProps,
    internalArgProps: PlasmicSqueezeVariant2__ArgProps
  }
);

export default PlasmicSqueezeVariant2;
/* prettier-ignore-end */
